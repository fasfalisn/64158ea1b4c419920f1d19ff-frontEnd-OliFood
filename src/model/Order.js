/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: it@vilabs.eu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Product from './Product';
import User from './User';

/**
 * The Order model module.
 * @module model/Order
 * @version 1.0.0
 */
class Order {
    /**
     * Constructs a new <code>Order</code>.
     * @alias module:model/Order
     * @param orderprice {Number} 
     * @param orderstatus {String} 
     * @param ordersupplier {module:model/User} 
     */
    constructor(orderprice, orderstatus, ordersupplier, ordercustomer, orderproducts) { 
        
        Order.initialize(this, orderprice, orderstatus, ordersupplier, ordercustomer, orderproducts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, orderprice, orderstatus, ordersupplier, ordercustomer, orderproducts) { 
        obj['orderprice'] = orderprice;
        obj['orderstatus'] = orderstatus;
        obj['ordersupplier'] = ordersupplier;
        obj['ordercustomer'] = ordercustomer;
        obj['orderproducts'] = orderproducts;
    }

    /**
     * Constructs a <code>Order</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Order} obj Optional instance to populate.
     * @return {module:model/Order} The populated <code>Order</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Order();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('orderprice')) {
                obj['orderprice'] = ApiClient.convertToType(data['orderprice'], 'Number');
            }
            if (data.hasOwnProperty('orderstatus')) {
                obj['orderstatus'] = ApiClient.convertToType(data['orderstatus'], 'String');
            }
            if (data.hasOwnProperty('ordersupplier')) {
                obj['ordersupplier'] = ApiClient.convertToType(data['ordersupplier'], User);
            }
            if (data.hasOwnProperty('ordercustomer')) {
                obj['ordercustomer'] = ApiClient.convertToType(data['ordercustomer'], User);
            }
            if (data.hasOwnProperty('orderproducts')) {
                obj['orderproducts'] = ApiClient.convertToType(data['orderproducts'], [Product, 'String']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} _id
 */
Order.prototype['_id'] = undefined;

/**
 * @member {Number} orderprice
 */
Order.prototype['orderprice'] = undefined;

/**
 * @member {String} orderstatus
 */
Order.prototype['orderstatus'] = undefined;

/**
 * @member {module:model/User} ordersupplier
 */
Order.prototype['ordersupplier'] = undefined;

Order.prototype['ordercustomer'] = undefined;

Order.prototype['orderproducts'] = undefined;






export default Order;

